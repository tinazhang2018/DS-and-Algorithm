# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        
        
        def merge(h1, h2):
            
            dummy = ListNode(0)
            cur = dummy
            
            while (h1 and h2):
                if h1.val <= h2.val:
                    cur.next = h1
                    h1 = h1.next
                else:
                    cur.next = h2
                    h2 = h2.next
                    
                cur = cur.next
                
            if h1:
                cur.next = h1
            elif h2:
                cur.next = h2
                
            return dummy.next
        
        def getmid(head):
            
            pre = head
            slow = head
            fast = head
            
            while (fast and fast.next):
                pre = slow
                slow = slow.next
                fast = fast.next.next
                
            pre.next = None
            return slow
        
        if ( head is None or head.next is None):
            return head
        
        mid = getmid(head)
        
        left = self.sortList(head)
        right = self.sortList(mid)
        
        return merge(left, right)
