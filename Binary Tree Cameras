# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def minCameraCover(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        
        if root is None:
            return 0
        
        cset = set()
        
        self.ans = 0
        
        cset.add(None)
        
        def dfs(node, p):
            if ( node is not None):
                dfs(node.left, node)
                dfs(node.right, node)
                
                if node.left not in cset or node.right not in cset or ( p == None and node not in cset):
                    self.ans += 1
                
                    cset.add(node)
                    cset.add(p)
                    cset.add(node.left)
                    cset.add(node.right)
                
        dfs(root, None)
        
        return self.ans
