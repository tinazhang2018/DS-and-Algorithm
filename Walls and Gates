class Solution(object):
    def wallsAndGates(self, rooms):
        """
        :type rooms: List[List[int]]
        :rtype: None Do not return anything, modify rooms in-place instead.
        """
        
        m = len(rooms)
        n = len(rooms[0])
        
        
        def dfs(r, c):
            
            d = [(r+1, c, 1), (r-1, c, 1), (r, c+1, 1, ), (r, c-1, 1)]
            q = deque(d)
            
            v = set()
            
            while q:
                i, j, dis = q.popleft()
                
                if ( i < 0 or i >= m or j < 0 or j >= n ):
                    continue
                if rooms[i][j] <= 1: continue
                
                if ( i,j, dis) in v: continue
                
                v.add((i,j, dis))
                
                if dis < rooms[i][j]:
                    rooms[i][j] = dis
                    q.append((i+1, j, dis+1))
                    q.append((i-1, j, dis+1))
                    q.append((i, j+1, dis+1))
                    q.append((i, j-1, dis+1))
            
            
            
            return
        
        for i in range(m):
            for j in range(n):
                if rooms[i][j] == 0:
                    dfs(i,j)
                    
        return rooms
